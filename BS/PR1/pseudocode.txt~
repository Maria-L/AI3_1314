Steffen Giersch, Maria Luedemann

method usage() {
  cat << EOF  
  DESCRIPTION
    splitfix.sh [OPTIONS] FILE [FILE ...]
    Split FILE into fixed-size pieces.
    The pieces are, by default, 10 lines long, if FILE is a text file.
    The pieces are, by default, 10 kiB long, if FILE is *not* a text file.
    The last piece may be smaller - it contains the rest of the original file.
    The output files bear the name of the input file with a 4-digit numerical suffix.
    The original file can be reconstructend with the command "cat FILE.*".
  
  EXAMPLE:
    splitfix.sh foo.pdf
      splits foo.pdf into the files
      foo.pdf.0000 foo.pdf.0001 etc.
      
  splitfix.sh [-h | --help] 	This help text
  splitfix.sh --version		Print version number
  
  OPTIONS:
  -h
    --help	this help text
    
  -s
    --SIZE	size of the pieces
		  in lines (for text files)
		  in kiBytes (for other files)
  
  -v
    --verbose print debugging messages
}

method getType(arg) {
  return (file -b arg | grep "\<text\>)
}

method splitting(size) {
  while( $1 != "" )
    if [ getType($1) == "" ]
      split -d -b (size * 1000) -a 4 $1	$1.	#split bytes
      shift
    else
      split -d -l size -a 4 $1 $1.		#split lines
      shift
    fi
  endwhile
}

######## main #########
Variable size = 10

if [ $1 == "" ]
  usage
  exit 1
fi

while [ $1 != "" ]
  switch argument in
    case "-h" 
    case "--help"
      usage
      exit 1
      
    case "-s"
    case "--SIZE"
      shift
      size = $1
      shift
      splitting(size)
      exit 1
    
    case "-v"
      bash -x $f
      exit 1
    
    default
      shift
      splitting(10)
      exit 1
  endSwitch
endwhile

exit 0